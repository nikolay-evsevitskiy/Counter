{"version":3,"sources":["Button.tsx","Counter.tsx","InputValue.tsx","CounterSetting.tsx","App.tsx","reportWebVitals.ts","index.tsx","Counter.module.css"],"names":["Button","props","className","s","buttonComponent","onClick","changeValue","disabled","error","title","Counter","body","alertSetTitle","titleItem","errorMaxValue","errorStartValue","titleItemError","result","value","clickBoard","addValue","errorIncrement","resetValue","errorReset","InputValue","inputValueContainer","inputTitle","inputItem","type","onChange","e","onChangeValue","Number","currentTarget","errorInput","CounterSetting","inputBoard","maxValue","setMaxValue","startValue","setStartValue","clickBoarCounterSet","setButton","App","useState","errorValue","errorIncrementButton","errorResetButton","errorSettingButton","state","setState","useEffect","getFromLocalStorage","maxValueAsString","localStorage","getItem","startValueAsString","newMaxValue","JSON","parse","newStartValue","setItem","stringify","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c727d08c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./Counter.module.css\"\r\n\r\ntype ButtonPropsType = {\r\n    changeValue: () => void\r\n    title: string\r\n    error: boolean\r\n}\r\n\r\nexport function Button(props: ButtonPropsType) {\r\n    const addValueOnClick = () => {\r\n        props.changeValue()\r\n    }\r\n    return <button className={s.buttonComponent}\r\n                   onClick={addValueOnClick}\r\n                   disabled={props.error}>\r\n        {props.title}\r\n    </button>\r\n}","import React from 'react';\r\nimport {Button} from \"./Button\";\r\nimport s from \"./Counter.module.css\"\r\n\r\ntype CounterPropsType = {\r\n    value: number\r\n    addValue: () => void\r\n    resetValue: () => void\r\n    errorIncrement: boolean\r\n    errorReset: boolean\r\n    alertSetTitle: boolean\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n    error: boolean\r\n\r\n};\r\n\r\nexport function Counter(props: CounterPropsType) {\r\n\r\n    return <div className={s.body}>\r\n        {props.alertSetTitle ? <div className={s.titleItem}>\r\n            enter values and press 'set'\r\n        </div> : props.errorMaxValue || props.errorStartValue ? <div className={s.titleItemError}>\r\n            Incorrect value!\r\n        </div> : <div className={props.error ? s.error : s.result}>\r\n            {props.value}\r\n        </div>}\r\n        <div className={s.clickBoard}>\r\n            <Button title={'inc'}\r\n                    changeValue={props.addValue}\r\n                    error={props.errorIncrement}\r\n            />\r\n            <Button title={'reset'}\r\n                    changeValue={props.resetValue}\r\n                    error={props.errorReset}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent} from 'react'\r\nimport s from \"./Counter.module.css\";\r\n\r\ntype InputValueType = {\r\n    value: number\r\n    onChangeValue: (newValue: number) => void\r\n    error: boolean\r\n    title: string\r\n}\r\n\r\nexport function InputValue(props: InputValueType) {\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.onChangeValue(Number(e.currentTarget.value))\r\n    }\r\n\r\n    return <div className={s.inputValueContainer}>\r\n        <span className={s.inputTitle}>\r\n            {props.title} value:\r\n        </span>\r\n        <div className={s.inputItem}>\r\n            <input type=\"number\"\r\n                   value={props.value}\r\n                   onChange={onChangeHandler}\r\n                   className={props.error ? s.errorInput : ''}\r\n            />\r\n        </div>\r\n    </div>\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {Button} from \"./Button\";\r\nimport s from \"./Counter.module.css\"\r\nimport {InputValue} from \"./InputValue\";\r\n\r\ntype CounterPropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n    setButton: () => void\r\n    error: boolean\r\n    errorMaxValue: boolean\r\n    errorStartValue: boolean\r\n    setMaxValue: (newValue: number) => void\r\n    setStartValue: (newValue: number) => void\r\n\r\n};\r\n\r\nexport function CounterSetting(props: CounterPropsType) {\r\n    return <div className={s.body}>\r\n        <div className={s.inputBoard}>\r\n            <InputValue value={props.maxValue}\r\n                        onChangeValue={props.setMaxValue}\r\n                        error={props.errorMaxValue}\r\n                        title={\"max\"}\r\n            />\r\n\r\n            <InputValue value={props.startValue}\r\n                        onChangeValue={props.setStartValue}\r\n                        error={props.errorStartValue}\r\n                        title={\"start\"}\r\n            />\r\n        </div>\r\n        <div className={s.clickBoarCounterSet}>\r\n            <Button title={'set'}\r\n                    changeValue={props.setButton}\r\n                    error={props.error}\r\n            />\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport {Counter} from './Counter';\nimport {CounterSetting} from \"./CounterSetting\";\n\ntype  StatePropsType = {\n    value: number\n    errorIncrementButton: boolean\n    errorResetButton: boolean\n    errorSettingButton: boolean\n    maxValue: number\n    startValue: number\n    alertSetTitle: boolean\n    errorMaxValue: boolean\n    errorStartValue: boolean\n    errorValue: boolean\n}\n\nfunction App() {\n    const [state, setState] = useState<StatePropsType>({\n        value: 0,\n        maxValue: 0,\n        startValue: 0,\n        errorValue: false,\n        errorIncrementButton: true,\n        errorResetButton: true,\n        errorSettingButton: false,\n        alertSetTitle: false,\n        errorMaxValue: false,\n        errorStartValue: false\n    })\n\n    useEffect(() => {\n        getFromLocalStorage()\n    }, [])\n\n    const getFromLocalStorage = () => {\n        let maxValueAsString = localStorage.getItem('maxValue')\n        let startValueAsString = localStorage.getItem('startValue')\n        if (maxValueAsString && startValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString)\n            let newStartValue = JSON.parse(startValueAsString)\n            setState({...state, maxValue: newMaxValue, startValue: newStartValue})\n        }\n    }\n    const setToLocalStorage = () => {\n        localStorage.setItem('maxValue', JSON.stringify(state.maxValue))\n        localStorage.setItem('startValue', JSON.stringify(state.startValue))\n    }\n\n    const setButton = () => {\n        setState({\n            ...state,\n            value: state.startValue,\n            errorIncrementButton: false,\n            errorSettingButton: true,\n            errorMaxValue: false,\n            errorStartValue: false,\n            alertSetTitle: false\n        })\n        setToLocalStorage()\n    }\n    const addValue = () => {\n        if (state.value + 1 >= state.maxValue) {\n            setState({\n                ...state,\n                errorIncrementButton: true,\n                errorValue: true,\n                errorResetButton: false,\n                value: state.value + 1\n            })\n        } else {\n            setState({\n                ...state,\n                errorIncrementButton: false,\n                errorResetButton: false,\n                value: state.value + 1\n            })\n        }\n    }\n    const resetValue = () => {\n\n        return setState({\n            ...state,\n            errorIncrementButton: false,\n            errorResetButton: true,\n            errorValue: false,\n            value: state.startValue\n        })\n    }\n    const changeValue = (startValue: number, maxValue: number) => {\n        if (startValue < 0) {\n            setState({\n                ...state,\n                errorResetButton: true,\n                errorSettingButton: true,\n                startValue: startValue,\n                maxValue: maxValue,\n                errorStartValue: true,\n                alertSetTitle: false\n            })\n        } else if (maxValue <= startValue) {\n            setState({\n                ...state,\n                errorResetButton: true,\n                errorSettingButton: true,\n                startValue: startValue,\n                maxValue: maxValue,\n                errorMaxValue: true,\n                alertSetTitle: false\n            })\n        } else {\n            setState({\n                ...state,\n                errorResetButton: true,\n                errorIncrementButton: true,\n                errorSettingButton: false,\n                startValue: startValue,\n                maxValue: maxValue,\n                errorMaxValue: false,\n                errorStartValue: false,\n                alertSetTitle: true,\n                errorValue: false\n            })\n        }\n    }\n    const setMaxValue = (newValue: number) => {\n        setState({...state, maxValue: newValue})\n        changeValue(state.startValue, newValue)\n    }\n    const setStartValue = (newValue: number) => {\n        setState({...state, startValue: newValue})\n        changeValue(newValue, state.maxValue)\n    }\n\n    return (\n        <div>\n            <Counter\n                value={state.value}\n                addValue={addValue}\n                resetValue={resetValue}\n                errorIncrement={state.errorIncrementButton}\n                errorReset={state.errorResetButton}\n                alertSetTitle={state.alertSetTitle}\n                errorMaxValue={state.errorMaxValue}\n                errorStartValue={state.errorStartValue}\n                error={state.errorValue}\n            />\n            <CounterSetting\n                startValue={state.startValue}\n                maxValue={state.maxValue}\n                setButton={setButton}\n                error={state.errorSettingButton}\n                setMaxValue={setMaxValue}\n                setStartValue={setStartValue}\n                errorMaxValue={state.errorMaxValue}\n                errorStartValue={state.errorStartValue}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Counter_body__2p2ww\",\"result\":\"Counter_result__luTgo\",\"titleItem\":\"Counter_titleItem__3Xpn2\",\"titleItemError\":\"Counter_titleItemError__1VnCB\",\"inputBoard\":\"Counter_inputBoard__eql-3\",\"inputValueContainer\":\"Counter_inputValueContainer__3H2Vp\",\"inputItem\":\"Counter_inputItem__2TrUr\",\"inputTitle\":\"Counter_inputTitle__37DcJ\",\"clickBoard\":\"Counter_clickBoard__3zVfS\",\"clickBoarCounterSet\":\"Counter_clickBoarCounterSet__1Rpb-\",\"buttonComponent\":\"Counter_buttonComponent__2XPdO\",\"error\":\"Counter_error__eqi3N\",\"buttonStyle\":\"Counter_buttonStyle__2SPAb\",\"errorInput\":\"Counter_errorInput__1SJoU\"};"],"sourceRoot":""}